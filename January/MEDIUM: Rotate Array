// MY OWN APPROACHES AND SOLUTIONS
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        // space complexity O(1) but a bit slow
        // In this approach, I will reverse the last k elements, then reverse the whole array, then reverse the elements after kth index
        int n=nums.size();
        if(k==0 || n==1)
        {
            return;
        }
        if(k>=n)
        {
            k=k%n;
        }
        int first=n-k;
        int last=n-1;
        while(first<last)
        {
            swap(nums[first], nums[last]);
            first++;
            last--;
        }
        first=0, last=n-1;
        while(first<last)
        {
            swap(nums[first], nums[last]);
            first++;
            last--;
        }
        first=k;
        last=n-1;
        while(first<last)
        {
            swap(nums[first], nums[last]);
            first++;
            last--;
        }
        
        
        /* Space complexity O(n) but faster
        int n=nums.size();
        if(k==0 || n==1)
        {
            return;
        }
        vector<int> temp;
        temp=nums;
        if(k>=n)
        {
            k=k%n;
        }
        int j=0;
        int i=n-k;
        while(j<n)
        {
            if(i==n)
            {
                i=0;
            }
            
            nums[j]=temp[i];
            j++;
            i++;
        }*/
    }
};
