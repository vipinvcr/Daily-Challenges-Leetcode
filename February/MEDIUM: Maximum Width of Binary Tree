/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode* , unsigned long long int>> store;
        store.push({root, 0});
        int width=INT_MIN;
        while(!store.empty())
        {
            unsigned long long int l=0, r=0;
            int Size=store.size();
            unsigned long long int minn=store.front().second;
            for(int i=0; i<Size; i++)
            {
                auto element=store.front();
                TreeNode *node= element.first;
                if(node->left)
                {
                    store.push({node->left, 2*(element.second)+1-minn});
                }
                if(node->right)
                {
                    store.push({node->right, 2*(element.second)+2-minn});
                }
                if(i==0)
                {
                    l=element.second - minn;
                }
                if(i==Size-1)
                {
                    r=element.second-minn;
                }
                width=max(width, int(r-l));
                store.pop();
            }
        }
        return width+1;
        }
};
