class Solution {
public:
    bool isValid(string s) {
        if(s.size()==1)
            return false;
        
        stack<char> store;
        store.push(s[0]);
        for(int i=1; i<s.size(); i++)
        {
            if(store.empty())
                store.push(s[i]);
            else
            {
            switch (s[i])
            {
                case ']':
                    if(store.top()=='[')
                        store.pop();
                    else
                        store.push(s[i]);
                    break;
                case '}':
                    if(store.top()=='{')
                        store.pop();
                    else
                        store.push(s[i]);
                    break;
                case ')':
                    if(store.top()=='(')
                        store.pop();
                    else
                        store.push(s[i]);
                    break;
                default:
                    store.push(s[i]);
            }
            }
        }
        if(store.empty())
            return true;
        else
            return false;
        

        
        /*
        
        stack<char> st;  //taking stack for keep tracking the order of the brackets..
        for(auto i:s)  //iterate over each and every elements
        {
            if(i=='(' or i=='{' or i=='[')
                st.push(i);
            else
            {
                if(st.empty() or (st.top()=='(' and i!=')') or (st.top()=='{' and i!='}') or (st.top()=='[' and i!=']')) return false;
                st.pop();  //if control reaches to that line, it means we have got the right pair of brackets, so just pop it.
            }
        }
        return st.empty();  //at last, it may possible that we left something into the stack unpair so return checking stack is empty or not..
        */
    }
};
