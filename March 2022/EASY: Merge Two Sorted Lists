/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        //INPLACE APPROACH (BETTER)
        if(l1==NULL)
            return l2;
        else if(l2==NULL)
            return l1;
        else
        {
            ListNode* swap= NULL;
            if(l1->val > l2->val)
            {
                swap=l2;
                l2=l1;
                l1=swap;
            }
            ListNode* result=l1;
            ListNode* temp=l1;
            while(l1 != NULL && l2!=NULL)
            {
                while(l1!=NULL && l1->val <= l2->val)
                {
                    temp=l1;
                    l1=l1->next;
                }
                temp->next=l2;
                swap=l2;
                l2=l1;
                l1=swap;
            }
            return result;
        }
        
        
        /* EXTRA SPACE (STILL NOT BETTER)
        ListNode* start= new ListNode;
        ListNode* temp=start;
        while(l1&&l2)
        {
            if(l1->val < l2->val)
            {
                temp->next=l1;
                l1=l1->next;
            }
            else
            {
                temp->next=l2;
                l2=l2->next;
            }
            temp=temp->next;
        }
        if(l1) temp->next=l1;
        if(l2) temp->next=l2;
        return start->next;*/
    }
};
